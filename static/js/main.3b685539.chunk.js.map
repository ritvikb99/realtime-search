{"version":3,"sources":["Card.js","CardsList.js","SearchBox.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","name","id","email","className","src","alt","CardsList","robots","map","user","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","children","App","onSearchChange","event","setState","searchField","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","robot","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0RAgBeA,EAbF,SAACC,GAAU,IACbC,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,GAAIC,EAASH,EAATG,MACjB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAG,+BAA0BH,EAA1B,YAAwCI,IAAI,QACpD,6BACI,4BAAKL,GACL,2BAAIE,MCELI,EATG,SAAC,GAMf,OAN0B,EAAVC,OACQC,KAAI,SAACC,GACzB,OACI,kBAAC,EAAD,CAAMC,IAAKD,EAAKR,GAAIA,GAAIQ,EAAKR,GAAID,KAAQS,EAAKT,KAAME,MAAOO,EAAKP,YCE7DS,EANG,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aAChB,OACA,2BAAOT,UAAU,mCAAmCU,KAAK,SAASC,YAAY,SAASC,SAAUH,KCOtFI,G,YARA,SAACjB,GACZ,OACI,yBAAKE,GAAG,UACHF,EAAMkB,YCuCJC,E,kDArCX,WAAYnB,GAAO,IAAD,8BACd,cAAMA,IAWVoB,eAAiB,SAACC,GACd,EAAKC,SAAS,CACVC,YAAaF,EAAMG,OAAOC,SAZ9B,EAAKC,MAAQ,CACTlB,OAAQ,GACRe,YAAc,IAJJ,E,gEAQE,IAAD,OACfI,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UAC3EF,MAAK,SAAAG,GAAK,OAAE,EAAKT,SAAS,CAACd,OAAQuB,S,+BAO9B,IAAD,OACDC,EAAiBC,KAAKP,MAAMlB,OAAO0B,QAAO,SAAAC,GAC1C,OAAOA,EAAMlC,KAAKmC,cAAcC,SAAS,EAAKX,MAAMH,YAAYa,kBAEpE,OACI,kBAAC,WAAD,KACI,yBAAKhC,UAAU,MACf,wBAAIA,UAAU,MAAd,eACA,wBAAIA,UAAU,MAAd,yBACA,6BAAK,kBAAC,EAAD,CAAWS,aAAcoB,KAAKb,kBACnC,6BACA,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAWZ,OAAUwB,W,GA9BvBM,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3b685539.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Card = (props) =>{\n    const {name, id, email} = props;\n    return(\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img src={`https://robohash.org/${id}?100x100`} alt=\"lol\" />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardsList = ({robots})=>{\n    let cardsArray = robots.map((user)=>{\n        return(\n            <Card key={user.id} id={user.id} name = {user.name} email={user.email} />\n        );\n    });\n    return(cardsArray);\n}\n\nexport default CardsList","import React from 'react';\n\nconst SearchBox = ({searchChange})=>{\n    return(\n    <input className=\"pa3 ba b--green bg-lightest-blue\" type=\"search\" placeholder=\"Search\" onChange={searchChange} />\n    );\n}\n\nexport default SearchBox;\n","import React from 'react';\nimport './Scroll.css';\n\nconst Scroll = (props)=>{\n    return(\n        <div id=\"scroll\">\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll;","import React, { Fragment } from 'react';\nimport CardsList from './CardsList';\nimport SearchBox from './SearchBox';\n//import {robots} from './robots';\nimport './App.css';\nimport Scroll from './Scroll';\n\nclass App extends React.Component{\n    constructor(props){\n        super(props);         //Always pass props to base constructor\n        this.state = {\n            robots: [],\n            searchField : \"\",\n        };\n    }\n\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users').then(response=>response.json())\n        .then(users=>this.setState({robots: users}));\n    }\n    onSearchChange = (event)=>{\n        this.setState({\n            searchField: event.target.value,\n        });\n    }\n    render() {\n        let filteredRobots = this.state.robots.filter(robot=>{\n            return(robot.name.toLowerCase().includes(this.state.searchField.toLowerCase()));\n        });        \n        return(\n            <Fragment>\n                <div className=\"tc\">\n                <h1 className=\"f1\">ReactSearch</h1>\n                <h1 className=\"f1\">With JSON placeholder</h1>\n                <div><SearchBox searchChange={this.onSearchChange}/></div>\n                <br></br>\n                <Scroll>\n                    <CardsList robots = {filteredRobots} />\n                </Scroll>\n                </div>\n            </Fragment>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}